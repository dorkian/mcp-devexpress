{
  "properties": [
    {
      "name": "Properties",
      "subMembers": [
        {
          "name": "Configuration",
          "type": null,
          "default": null,
          "description": "An object defining configuration properties for the Validator UI component."
        },
        {
          "name": "adapter",
          "subMembers": [
            {
              "name": "adapter",
              "type": "Object",
              "default": null,
              "description": "An object that specifies what and when to validate, and how to apply the validation result."
            },
            {
              "name": "applyValidationResults",
              "type": "function()",
              "default": null,
              "description": "A function that the Validator UI component calls after validating a specified value."
            },
            {
              "name": "bypass",
              "type": "function()",
              "default": null,
              "description": "A function that returns a Boolean value specifying whether or not to bypass validation."
            },
            {
              "name": "focus",
              "type": "function()",
              "default": null,
              "description": "A function that sets focus to a validated editor when the corresponding [ValidationSummary] item is focused."
            },
            {
              "name": "getValue",
              "type": "function()",
              "default": null,
              "description": "A function that returns the value to be validated."
            },
            {
              "name": "reset",
              "type": "function()",
              "default": null,
              "description": "A function that resets the validated values."
            },
            {
              "name": "validationRequestsCallbacks",
              "type": "Array<function()>",
              "default": null,
              "description": "Callbacks to be executed on the value validation."
            }
          ]
        },
        {
          "name": "name",
          "type": "String",
          "default": null,
          "description": "Specifies the editor name to be used in the validation default messages."
        },
        {
          "name": "rtlEnabled",
          "type": null,
          "default": null,
          "description": null
        },
        {
          "name": "validationGroup",
          "type": "String",
          "default": null,
          "description": "Specifies the validation group the editor will be related to."
        },
        {
          "name": "validationRules",
          "type": "Array<RequiredRule, NumericRule, RangeRule, StringLengthRule, CustomRule, CompareRule, PatternRule, EmailRule, AsyncRule>",
          "default": null,
          "description": "An array of validation rules to be checked for the editor with which the **dxValidator** object is associated."
        }
      ]
    },
    {
      "name": "Validation Rules",
      "subMembers": [
        {
          "name": "AsyncRule",
          "subMembers": [
            {
              "name": "AsyncRule",
              "type": "Object",
              "default": null,
              "description": "A custom validation rule that is checked asynchronously. Use async rules for server-side validation."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "false",
              "description": "If **true**, the [validationCallback] is not executed for **null**, **undefined**, **false**, and empty strings."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Value is invalid'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "reevaluate",
              "type": "Boolean",
              "default": "true",
              "description": "Indicates whether the rule should always be checked for the target value or only when the value changes."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"async\"* to use the **AsyncRule**."
            },
            {
              "name": "validationCallback",
              "type": "function(options)",
              "default": null,
              "description": "A function that validates the target value."
            }
          ]
        },
        {
          "name": "CompareRule",
          "subMembers": [
            {
              "name": "CompareRule",
              "type": "Object",
              "default": null,
              "description": "A validation rule that demands that a validated editor has a value that is equal to a specified expression."
            },
            {
              "name": "comparisonTarget",
              "type": "function()",
              "default": null,
              "description": "Specifies the function whose return value is used for comparison with the validated value."
            },
            {
              "name": "comparisonType",
              "type": "Enums.ComparisonOperator",
              "default": "'=='",
              "description": "Specifies the operator to be used for comparing the validated value with the [target]."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "false",
              "description": "If set to **true**, empty values are valid."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Values do not match'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"compare\"* to use the **CompareRule**."
            }
          ]
        },
        {
          "name": "CustomRule",
          "subMembers": [
            {
              "name": "CustomRule",
              "type": "Object",
              "default": null,
              "description": "A rule with custom validation logic."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "false",
              "description": "If **true**, the [validationCallback] is not executed for **null**, **undefined**, **false**, and empty strings."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Value is invalid'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "reevaluate",
              "type": "Boolean",
              "default": "false",
              "description": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"custom\"* to use the **CustomRule**."
            },
            {
              "name": "validationCallback",
              "type": "function(options)",
              "default": "return true;",
              "description": "A function that validates the target value."
            }
          ]
        },
        {
          "name": "EmailRule",
          "subMembers": [
            {
              "name": "EmailRule",
              "type": "Object",
              "default": null,
              "description": "A validation rule that requires that the validated field match the Email pattern."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "true",
              "description": "If set to **true**, empty values are valid."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Email is invalid'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"email\"* to use the **EmailRule**."
            }
          ]
        },
        {
          "name": "NumericRule",
          "subMembers": [
            {
              "name": "NumericRule",
              "type": "Object",
              "default": null,
              "description": "A validation rule that demands that the validated field has a numeric value."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "true",
              "description": "If set to **true**, empty values are valid."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Value should be a number'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"numeric\"* to use the **NumericRule**."
            }
          ]
        },
        {
          "name": "PatternRule",
          "subMembers": [
            {
              "name": "PatternRule",
              "type": "Object",
              "default": null,
              "description": "A validation rule that requires that the validated field match a specified pattern."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "true",
              "description": "If set to **true**, empty values are valid."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Value does not match pattern'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "pattern",
              "type": "RegExp | String",
              "default": null,
              "description": "Specifies the regular expression that the validated value must match."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"pattern\"* to use the **PatternRule**."
            }
          ]
        },
        {
          "name": "RangeRule",
          "subMembers": [
            {
              "name": "RangeRule",
              "type": "Object",
              "default": null,
              "description": "A validation rule that demands the target value be within the specified value range (including the range's end points)."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "true",
              "description": "If set to **true**, empty values are valid."
            },
            {
              "name": "max",
              "type": "Date | Number | String",
              "default": null,
              "description": "Specifies the maximum value allowed for the validated value."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Value is out of range'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "min",
              "type": "Date | Number | String",
              "default": null,
              "description": "Specifies the minimum value allowed for the validated value."
            },
            {
              "name": "reevaluate",
              "type": "Boolean",
              "default": "false",
              "description": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"range\"* to use the **RangeRule**."
            }
          ]
        },
        {
          "name": "RequiredRule",
          "subMembers": [
            {
              "name": "RequiredRule",
              "type": "Object",
              "default": null,
              "description": "A validation rule that demands that a validated field has a value."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'Required'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "trim",
              "type": "Boolean",
              "default": "true",
              "description": "Indicates whether to remove the Space characters from the validated value."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"required\"* to use the **RequiredRule**."
            }
          ]
        },
        {
          "name": "StringLengthRule",
          "subMembers": [
            {
              "name": "StringLengthRule",
              "type": "Object",
              "default": null,
              "description": "A validation rule that demands the target value length be within the specified value range (including the range's end points)."
            },
            {
              "name": "ignoreEmptyValue",
              "type": "Boolean",
              "default": "false",
              "description": "If set to **true**, empty values are valid."
            },
            {
              "name": "max",
              "type": "Number",
              "default": null,
              "description": "Specifies the maximum length allowed for the validated value."
            },
            {
              "name": "message",
              "type": "String",
              "default": "'The length of the value is not correct'",
              "description": "Specifies the message that is shown if the rule is broken."
            },
            {
              "name": "min",
              "type": "Number",
              "default": null,
              "description": "Specifies the minimum length allowed for the validated value."
            },
            {
              "name": "trim",
              "type": "Boolean",
              "default": "true",
              "description": "Indicates whether or not to remove the Space characters from the validated value."
            },
            {
              "name": "type",
              "type": "Enums.ValidationRuleType",
              "default": null,
              "description": "Specifies the rule type. Set it to *\"stringLength\"* to use the **StringLengthRule**."
            }
          ]
        },
        {
          "name": "Validation Rules",
          "type": null,
          "default": null,
          "description": "This section lists validation rules that can be used within the dxValidator."
        }
      ]
    },
    {
      "name": "Validation Result",
      "subMembers": [
        {
          "name": "Validation Result",
          "type": "Object",
          "default": null,
          "description": "A validation result."
        },
        {
          "name": "brokenRule",
          "type": "RequiredRule | NumericRule | RangeRule | StringLengthRule | CustomRule | CompareRule | PatternRule | EmailRule | AsyncRule",
          "default": null,
          "description": "A rule that failed to pass the check. Contains the first item from the [brokenRules] array."
        },
        {
          "name": "brokenRules",
          "type": "Array<RequiredRule, NumericRule, RangeRule, StringLengthRule, CustomRule, CompareRule, PatternRule, EmailRule, AsyncRule>",
          "default": null,
          "description": "An array of the [validationRules] that failed to pass the check."
        },
        {
          "name": "complete",
          "type": "Promise<dxValidatorResult>",
          "default": null,
          "description": "A promise that is fulfilled when all async rules are validated."
        },
        {
          "name": "isValid",
          "type": "Boolean",
          "default": null,
          "description": "Indicates whether all the checked rules are satisfied."
        },
        {
          "name": "pendingRules",
          "type": "Array<AsyncRule>",
          "default": null,
          "description": "An array of [async rules] whose promises are not fulfilled or rejected. Contains items only when the [status] is *\"pending\"*."
        },
        {
          "name": "status",
          "type": "Enums.ValidationStatus",
          "default": null,
          "description": "Indicates the validation status."
        },
        {
          "name": "validationRules",
          "type": "Array<RequiredRule, NumericRule, RangeRule, StringLengthRule, CustomRule, CompareRule, PatternRule, EmailRule, AsyncRule>",
          "default": null,
          "description": "Validation rules specified for the Validator."
        },
        {
          "name": "value",
          "type": "any",
          "default": null,
          "description": "The value being validated."
        }
      ]
    },
    {
      "name": "dxValidator",
      "type": null,
      "default": null,
      "description": "A UI component that is used to validate the associated DevExtreme editors against the defined validation rules."
    }
  ],
  "Methods": [
    {
      "name": "beginUpdate()",
      "type": null,
      "default": null,
      "description": null
    },
    {
      "name": "defaultOptions(rule)",
      "type": null,
      "default": null,
      "description": null
    },
    {
      "name": "dispose()",
      "type": null,
      "default": null,
      "description": null
    },
    {
      "name": "endUpdate()",
      "type": null,
      "default": null,
      "description": null
    },
    {
      "name": "focus()",
      "type": null,
      "default": null,
      "description": "Sets focus to the editor associated with the current Validator object."
    },
    {
      "name": "reset()",
      "type": null,
      "default": null,
      "description": "Resets the value and validation result of the editor associated with the current Validator object."
    },
    {
      "name": "validate()",
      "type": null,
      "default": null,
      "description": "Validates the value of the editor that is controlled by the current Validator object against the list of the specified [validation rules]."
    }
  ],
  "Events": [
    {
      "name": "onDisposing",
      "type": "function(e)",
      "default": null,
      "description": "A function that is executed before the UI component is [disposed of].md '{basewidgetpath}/Methods/#dispose')."
    },
    {
      "name": "onInitialized",
      "type": "function(e)",
      "default": null,
      "description": "A function used in JavaScript frameworks to save the UI component instance."
    },
    {
      "name": "onOptionChanged",
      "type": "function(e)",
      "default": null,
      "description": "A function that is executed after a UI component property is changed."
    },
    {
      "name": "onValidated",
      "type": "function(validatedInfo)",
      "default": null,
      "description": "A function that is executed after a value is validated."
    },
    {
      "name": "validated",
      "type": "eventType",
      "default": null,
      "description": "Raised after a value is validated."
    }
  ],
  "Types": [
    {
      "name": "DisposingEvent",
      "type": "Object",
      "default": null,
      "description": "The type of the [disposing] event handler's argument."
    },
    {
      "name": "InitializedEvent",
      "type": "Object",
      "default": null,
      "description": "The type of the [initialized] event handler's argument."
    },
    {
      "name": "OptionChangedEvent",
      "type": "Object",
      "default": null,
      "description": "The type of the [optionChanged] event handler's argument."
    },
    {
      "name": "ValidatedEvent",
      "subMembers": [
        {
          "name": "ValidatedEvent",
          "type": "Object",
          "default": null,
          "description": "The type of the [validated] event handler's argument."
        },
        {
          "name": "brokenRule",
          "type": "ValidationRule",
          "default": null,
          "description": "The object that represents the first broken rule on the list of specified validation rules."
        },
        {
          "name": "brokenRules",
          "type": "Array<ValidationRule>",
          "default": null,
          "description": "An array of [validationRules] that failed to pass the check."
        },
        {
          "name": "isValid",
          "type": "Boolean",
          "default": null,
          "description": "Indicates whether the value satisfies all rules."
        },
        {
          "name": "name",
          "type": "String",
          "default": null,
          "description": "The value of the [name] property."
        },
        {
          "name": "status",
          "type": "Enums.ValidationStatus",
          "default": null,
          "description": "Indicates the validation [status]."
        },
        {
          "name": "validationRules",
          "type": "Array<ValidationRule>",
          "default": null,
          "description": "An array of validation rules specified for the current **dxValidator** object."
        },
        {
          "name": "value",
          "type": "Object",
          "default": null,
          "description": "The validated value."
        }
      ]
    }
  ]
}